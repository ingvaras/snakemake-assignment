all_samples = ["Collibri_standard_protocol-HBR-Collibri-100_ng-2_S1_L001_R1_001", "Collibri_standard_protocol-HBR-Collibri-100_ng-2_S1_L001_R2_001", 
"Collibri_standard_protocol-HBR-Collibri-100_ng-3_S2_L001_R1_001", 
"Collibri_standard_protocol-HBR-Collibri-100_ng-3_S2_L001_R2_001", 
"Collibri_standard_protocol-UHRR-Collibri-100_ng-2_S3_L001_R1_001", 
"Collibri_standard_protocol-UHRR-Collibri-100_ng-2_S3_L001_R2_001", 
"Collibri_standard_protocol-UHRR-Collibri-100_ng-3_S4_L001_R1_001", 
"Collibri_standard_protocol-UHRR-Collibri-100_ng-3_S4_L001_R2_001", 
"KAPA_mRNA_HyperPrep_-HBR-KAPA-100_ng_total_RNA-2_S5_L001_R1_001", 
"KAPA_mRNA_HyperPrep_-HBR-KAPA-100_ng_total_RNA-2_S5_L001_R2_001", 
"KAPA_mRNA_HyperPrep_-HBR-KAPA-100_ng_total_RNA-3_S6_L001_R1_001", 
"KAPA_mRNA_HyperPrep_-HBR-KAPA-100_ng_total_RNA-3_S6_L001_R2_001", 
"KAPA_mRNA_HyperPrep_-UHRR-KAPA-100_ng_total_RNA-2_S7_L001_R1_001", 
"KAPA_mRNA_HyperPrep_-UHRR-KAPA-100_ng_total_RNA-2_S7_L001_R2_001", 
"KAPA_mRNA_HyperPrep_-UHRR-KAPA-100_ng_total_RNA-3_S8_L001_R1_001", 
"KAPA_mRNA_HyperPrep_-UHRR-KAPA-100_ng_total_RNA-3_S8_L001_R2_001"]

all_samples_for_alignment = ["Collibri_standard_protocol-HBR-Collibri-100_ng-2_S1_L001", 
"Collibri_standard_protocol-HBR-Collibri-100_ng-3_S2_L001", 
"Collibri_standard_protocol-UHRR-Collibri-100_ng-2_S3_L001", 
"Collibri_standard_protocol-UHRR-Collibri-100_ng-3_S4_L001",  
"KAPA_mRNA_HyperPrep_-HBR-KAPA-100_ng_total_RNA-2_S5_L001",  
"KAPA_mRNA_HyperPrep_-HBR-KAPA-100_ng_total_RNA-3_S6_L001", 
"KAPA_mRNA_HyperPrep_-UHRR-KAPA-100_ng_total_RNA-2_S7_L001", 
"KAPA_mRNA_HyperPrep_-UHRR-KAPA-100_ng_total_RNA-3_S8_L001",]

rule fastqc:
    input:
        expand("data/samples/{sample}.fastq", sample=all_samples)
    output:
        expand("results/fastqc/{sample}_fastqc.zip", sample=all_samples)
    shell:
        "fastqc -o results/fastqc {input}"

rule multiqc:
    input:
        expand("results/fastqc/{sample}_fastqc.zip", sample=all_samples)
    output:
        "results/multiqc/multiqc_report.html"
    shell:
        "multiqc {input} -o results/multiqc --filename multiqc_report.html"

rule bbduk:
    input:
        fastq=expand("data/samples/{sample}.fastq", sample=all_samples),
	adapters="data/adapters.fa"
    output:
        expand("results/data/samples/{sample}.fastq", sample=all_samples)
    shell:
        """
	for sample in {input.fastq}; do
            bbduk.sh in=$sample out=results/$sample ref={input.adapters} ktrim=r k=23 mink=11 hdist=1 tpe tbo qtrim=r trimq=10;
        done
	"""

rule fastq_trimmed:
    input:
        expand("results/data/samples/{sample}.fastq", sample=all_samples)
    output:
        expand("results/fastqc_trimmed/{sample}_fastqc.zip", sample=all_samples)
    shell:
        "fastqc -o results/fastqc_trimmed {input}"

rule multiqc_trimmed:
    input:
        expand("results/fastqc_trimmed/{sample}_fastqc.zip", sample=all_samples)
    output:
        "results/multiqc/multiqc_trimmed_report.html"
    shell:
        "multiqc {input} -o results/multiqc --filename multiqc_trimmed_report.html"

all_samples = ["sample1", "sample2", "sample3"]

rule star_align:
    input:
        r1 = expand("data/samples/{sample}_R1_001.fastq", sample=all_samples_for_alignment),
        r2 = expand("data/samples/{sample}_R2_001.fastq", sample=all_samples_for_alignment),
        all_samples=all_samples_for_alignment
    output:
        expand("results/aligned/{sample}.bam", sample=all_samples_for_alignment)
    shell:
        """
        for sample in {input.all_samples}; do
            STAR \
            --readFilesIn data/samples/$sample_R1_001.fastq data/samples/$sample_R2_001.fastq \
            --outFileNamePrefix results/aligned/${sample}.bam \
            --outSAMtype BAM SortedByCoordinate \
            --runThreadN 4;
        done
        """

